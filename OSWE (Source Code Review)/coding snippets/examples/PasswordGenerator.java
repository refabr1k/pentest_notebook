import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import java.util.Random;


public class PasswordGenerator
{
  public static final String CHAR_LOWER = "abcdefghijklmnopqrstuvwxyz";
  public static final String NUMBERS = "1234567890";
  public static final String SYMBOLS = "!@#$%^&*()";
  public static final String CHARSET = "abcdefghijklmnopqrstuvwxyz" + "abcdefghijklmnopqrstuvwxyz".toUpperCase() + "1234567890" + "!@#$%^&*()";
  
  public static final int PASSWORD_LENGTH = 16;
  

  public static void main(String args[]) {

  String passordFile = "password.txt";
  String base64file = "base64.txt";
    
    /*
     * DELETE password.txt if exists
     */
    File passFile = new File(passordFile);
    if (passFile.exists()) {
        passFile.delete();
    }

    File baseFile = new File(base64file);
    if (baseFile.exists()) {
        baseFile.delete();
    }
        
    String timeSeed = args[0];
    
    long currentTime =  Long.parseLong(timeSeed);
    long startTime = currentTime - 2000; // buffer for incase the create user was earlier

    long endTime = currentTime + 2000; // 2 seconds in milliseconds
    
    // System.out.println("startTime : " + startTime);
    // System.out.println("endTime : " + endTime);

    try {
            //LOOP EVERY MILLISECONDS TO CREATE TOKEN
            for (long curTime = startTime; curTime <= endTime; curTime++){        


                String token = generatePassword(curTime);
                writeToTokenFile(passordFile, token);

                String hash = hashPassword(token);
                writeToTokenFile(base64file, hash);
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException ex){
            ex.printStackTrace();
        }

    }
    
    public static String hashPassword(String pass) throws NoSuchAlgorithmException, UnsupportedEncodingException{
        // pass = "bb%lb8D*aH)($rzm";
        MessageDigest md = MessageDigest.getInstance("SHA1");

        return Base64.getEncoder().encodeToString(md.digest(pass.getBytes("UTF-8")));
    }


    public static String generatePassword(long timeSeed) throws UnsupportedEncodingException{
      Random random = new Random(timeSeed);
      StringBuilder sb = new StringBuilder();
      
      for (int i = 0; i < PASSWORD_LENGTH; i++) {
        sb.append(PasswordGenerator.CHARSET.charAt(random.nextInt(PasswordGenerator.CHARSET.length())));
      }

      return sb.toString();
     }


    public static void writeToTokenFile(String filename, String token) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename, true))) {
            writer.write(token);
            writer.newLine();            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }




}
