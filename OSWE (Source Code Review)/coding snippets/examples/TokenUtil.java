import java.util.Base64;
import java.util.Random;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.nio.file.Files;
import java.nio.file.Paths;


public class TokenUtil
{
  public static final String CHAR_LOWER = "abcdefghijklmnopqrstuvwxyz";
  public static final String NUMBERS = "1234567890";
  public static final String SYMBOLS = "!@#$%^&*()";
  public static final String CHARSET = "abcdefghijklmnopqrstuvwxyz" + "abcdefghijklmnopqrstuvwxyz".toUpperCase() + "1234567890" + "!@#$%^&*()";
  
  public static final int TOKEN_LENGTH = 42;

  public static void main(String args[]) {

    String fileName = "tokens.txt";
    
    /*
     * DELETE tokens.txt if exists
     */
    File file = new File(fileName);
    if (file.exists()) {
        file.delete();
    }
    
    String userId = args[0];
    String timeSeed = args[1];
    
    long startTime = Long.parseLong(timeSeed);

    long endTime = startTime + 2000; // 2 seconds in milliseconds

        //LOOP EVERY MILLISECONDS TO CREATE TOKEN
        for (long curTime = startTime; curTime <= endTime; curTime++){        
            String token = createToken(Integer.parseInt(userId), curTime);
            writeToTokenFile(fileName, token);
        }
    }
    
/* 
 * WRITE OUTPUT INTO A FILE
 * 
*/

    public static void writeToTokenFile(String filename, String token) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename, true))) {
            writer.write(token);
            writer.newLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }



  public static String createToken(int userId, long timeSeed) {

    // Random random = new Random(System.currentTimeMillis());
    Random random = new Random(timeSeed);
    StringBuilder sb = new StringBuilder();
    byte[] encbytes = new byte[42];
    
    for (int i = 0; i < 42; i++) {
      sb.append(CHARSET.charAt(random.nextInt(CHARSET.length())));
    }

    
    byte[] bytes = sb.toString().getBytes();
    
    for (int i = 0; i < bytes.length; i++) {
      encbytes[i] = (byte)(bytes[i] ^ (byte)userId);
    }
    
    return Base64.getUrlEncoder().withoutPadding().encodeToString(encbytes);
  }
}
